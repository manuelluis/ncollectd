.\" SPDX-License-Identifier: GPL-2.0-only
.TH ncollectd-python 5 "@NCOLLECTD_DATE@" "@NCOLLECTD_VERSION@" "ncollectd python man page"
.SH NAME
ncollectd-python \- Documentation of ncollectd's python plugin
.SH SYNOPSIS
\fBload-plugin\fP plugin
.br
\fBplugin\fP plugin {
    \fBencoding\fP \fIencoding\fP
    \fBmodule-path\fP \fI/path/to/your/python/modules\fP
    \fBlog-traces\fP \fItrue|false\fP
    \fBinteractive\fP \fItrue|false\fP
    \fBimport\fP "spam"
    \fBmodule\fP spam  {
      spam "wonderful" "lovely"
    }
.br
}
.SH DESCRIPTION
The \fBpython\fP plugin embeds a Python-interpreter into ncollectd and provides an
interface to ncollectd's plugin system. This makes it possible to write plugins
for ncollectd in Python.
.PP
The minimum required Python version is \fI2.6\fP.
.PP
Available configuration options:
.TP
\fBencoding\fP \fIencoding\fP
The default encoding for Unicode objects you pass to ncollectd. If you omit this
option it will default to \fBascii\fP on \fIPython 2\fP. On \fIPython 3\fP it will
always be \fButf-8\fP, as this function was removed, so this will be silently
ignored.

These defaults are hardcoded in Python and will ignore everything else,
including your locale.
.TP
\fBmodule-path\fP \fI/path/to/your/python/modules\fP
Prepends \fI/path/to/your/python/modules\fP to \f(CWsys.path\fP.
You won't be able to import any scripts you
wrote unless they are located in one of the directories in this list. Please
note that it only has effect on plugins loaded after this option. You can
use multiple \fBmodule-path\fP lines to add more than one directory.
.TP
\fBlog-traces\fP \fItrue|false\fP
If a Python script throws an exception it will be logged by ncollectd with the
name of the exception and the message. If you set this option to true it will
also log the full stacktrace just like the default output of an interactive
Python interpreter. This does not apply to the CollectError exception, which
will never log a stacktrace.

This should probably be set to false most of the time but is very useful for
development and debugging of new modules.
.TP
\fBinteractive\fP \fItrue|false\fP
This option will cause the module to launch an interactive Python interpreter
that reads from and writes to the terminal. Note that ncollectd will terminate
right after starting up if you try to run it as a daemon while this option is
enabled so make sure to start ncollectd with the \f(CW-f\fP option.

The \fBncollectd\fP module is \fBnot\fP imported into the interpreter's globals. You
have to do it manually. Be sure to read the help text of the module, it can be
used as a reference guide during coding.

This interactive session will behave slightly differently from a daemonized
ncollectd script as well as from a normal Python interpreter:
.RS
.TP
\fB1.\fP
ncollectd will try to import the \f(CWreadline\fP module to give you a decent
way of entering your commands. The daemonized ncollectd won't do that.
.TP
\fB2.\fP
Python will be handling \fBSIGINT\fP. Pressing \f(CWCtrl+C\fP will usually cause
collectd to shut down. This would be problematic in an interactive session,
therefore Python will be handling it in interactive sessions. This allows you
to use \f(CWCtrl+C\fP to interrupt Python code without killing collectd. This also
means you can catch \fCWKeyboardInterrupt\fP exceptions which does not work during
normal operation.

To quit ncollectd send \fBEOF\fP (press \f(CWCtrl+D\fP at the beginning of a new line).
.RE
.TP
\fBimport\fP "name"
Imports the python script \fIname\fP and loads it into the collectd
python process. If your python script is not found, be sure its
directory exists in python's \f(CWsys.path\fP. You can prepend to the
\f(CWsys.path\fP using the \fBmodule-path\fP configuration option.
.TP
\fBmodule\fP name
This block may be used to pass on configuration settings to a Python module.
The configuration is converted into an instance of the \fBConfig\fP class which is
passed to the registered configuration callback. See below for details about
the \fBConfig\fP class and how to register callbacks.

The \fIname\fP identifies the callback.

.SH STRINGS
There are a lot of places where strings are sent from collectd to Python and
from Python to collectd. How exactly this works depends on whether byte or
unicode strings or Python2 or Python3 are used.

Python2 has \fIstr\fP, which is just bytes, and \fIunicode\fP. Python3 has \fIstr\fP,
which is a unicode object, and \fIbytes\fP.

When passing strings from Python to collectd all of these object are supported
in all places, however \fIstr\fP should be used if possible. These strings must
not contain a NUL byte. Ignoring this will result in a \fITypeError\fP exception.
If a byte string was used it will be used as is by ncollectd. If a unicode
object was used it will be encoded using the default encoding (see above). If
this is not possible Python will raise a \fIUnicodeEncodeError\fP exception.

When passing strings from collectd to Python the behavior depends on the
Python version used. Python2 will always receive a \fIstr\fP object. Python3 will
usually receive a \fIstr\fP object as well, however the original string will be
decoded to unicode using the default encoding. If this fails because the
string is not a valid sequence for this encoding a \fIbytes\fP object will be
returned instead.

.SH WRITING YOUR OWN PLUGINS
Writing your own plugins is quite simple. collectd manages plugins by means of
\fBdispatch functions\fP which call the appropriate \fBcallback functions\fP
registered by the plugins. Any plugin basically consists of the implementation
of these callback functions and initializing code which registers the
functions with collectd. See the section \fBEXAMPLES\fP below for a really basic
example. The following types of \fBcallback functions\fP are known to collectd
(all of them are optional):

.TP
\fBconfiguration functions\fP
These are called during configuration if an appropriate
\fBmodule\fP block has been encountered. It is called once for each \fBmodule\fP
block which matches the name of the callback as provided with the
\f(CWregister_config\fP method - see below.

Python thread support has not been initialized at this point so do not use any
threading functions here!
.TP
\fBinit functions\fP
These are called once after loading the module and before any
calls to the read and write functions. It should be used to initialize the
internal state of the plugin (e. g. open sockets, ...). This is the
earliest point where you may use threads.
.TP
\fBread functions\fP
These are used to collect the actual data. It is called once
per interval (see the \fBinterval\fP configuration option of collectd). Usually
it will call \f(CWplugin_dispatch_values\fP to dispatch the values to collectd
which will pass them on to all registered \fBwrite functions\fP. If this function
throws any kind of exception the plugin will be skipped for an increasing
amount of time until it returns normally again.
.TP
\fBwrite functions\fP
These are used to write the dispatched values. It is called
once for every value that was dispatched by any plugin.
.TP
\fBlog functions\fP
These are used to pass messages of plugins or the daemon itself
to the user.
.TP
\fBnotification function\fP
These are used to act upon notifications. In general, a
notification is a status message that may be associated with a data instance.
Usually, a notification is generated by the daemon if a configured threshold
has been exceeded (see the section "THRESHOLD CONFIGURATION" in
L<collectd.conf(5)> for more details), but any plugin may dispatch
notifications as well.
.TP
\fBshutdown functions\fP
These are called once before the daemon shuts down. It should
be used to clean up the plugin (e.g. close sockets, ...).
.PP

Any function (except log functions) may throw an exception in case of
errors. The exception will be passed on to the user using ncollectd's logging
mechanism. If a log callback throws an exception it will be printed to standard
error instead.

See the documentation of the various \fBregister_\fP methods in the section
\fBFUNCTIONS\fP below for the number and types of arguments passed to each
\fBcallback function\fP. This section also explains how to register \fBcallback functions\fP
with ncollectd.

To enable a module, copy it to a place where Python can find it (i. e. a
directory listed in \f(CWsys.path\fP) just as any other Python plugin and add
an appropriate \fBimport\fP option to the configuration file. After restarting
ncollectd you're done.

.SH CLASSES
The following complex types are used to pass values between the Python plugin
and collectd:
.TP
\fBNCollectdError\fP
This is an exception. If any Python script raises this exception it will
still be treated like an error by collectd but it will be logged as a
warning instead of an error and it will never generate a stacktrace.
EX

    class NCollectdError(Exception)

.EE

Basic exception for collectd Python scripts.
Throwing this exception will not cause a stacktrace to be logged, even if
LogTraces is enabled in the config.
.TP
\fBConfig\fP
The Config class is an object which keeps the information provided in the
configuration file. The sequence of children keeps one entry for each
configuration option. Each such entry is another Config instance, which
may nest further if nested blocks are used.
.EX

 class Config(object)

.EE

This represents a piece of collectd's config file. It is passed to scripts with
config callbacks (see \f(CWregister_config\fP) and is of little use if created
somewhere else.

It has no methods beyond the bare minimum and only exists for its data members.

Data descriptors defined here:
.RS
.TP
\fBparent\fP
This represents the parent of this node. On the root node
of the config tree it will be None.
.TP
\fBkey\fP
This is the keyword of this item, i.e. the first word of any given line in the
config file. It will always be a string.
.TP
\fBvalues\fP
This is a tuple (which might be empty) of all value, i.e. words following the
keyword in any given line in the config file.

Every item in this tuple will be either a string, a float or a boolean,
depending on the contents of the configuration file.
.TP
\fBchildren\fP
This is a tuple of child nodes. For most nodes this will be empty. If this node
represents a block instead of a single line of the config file it will contain
all nodes in this block.
.RE

.TP
\fBMetric\fP
.TP
\fBMetricUnknownDouble\fP
.TP
\fBMetricUnknownLong\fP
.TP
\fBMetricGaugeDouble\fP
.TP
\fBMetricGaugeLong\fP
.TP
\fBMetricCounterDouble\fP
.TP
\fBMetricCounterULong\fP
.TP
\fBMetricInfo\fP
.TP
\fBMetricStateSet\fP
.TP
\fBMetricFamily\fP

Methods defined here:

=item B<dispatch>([type][, values][, plugin_instance][, type_instance][, plugin][, host][, time][, interval]) -> None.

Dispatch this instance to the collectd process. The object has members for each
of the possible arguments for this method. For a detailed explanation of these
parameters see the member of the same same.

If you do not submit a parameter the value saved in its member will be
submitted. If you do provide a parameter it will be used instead, without
altering the member.

Data descriptors defined here:

=over 4

=item interval

The interval is the timespan in seconds between two submits for the same data
source. This value has to be a positive integer, so you can't submit more than
one value per second. If this member is set to a non-positive value, the
default value as specified in the config file will be used (default: 10).

If you submit values more often than the specified interval, the average will
be used. If you submit less values, your graphs will have gaps.

=item values

These are the actual values that get dispatched to collectd. It has to be a
sequence (a tuple or list) of numbers. The size of the sequence and the type of
its content depend on the type member your I<types.db> file. For more
information on this read the L<types.db(5)> manual page.

If the sequence does not have the correct size upon dispatch a I<RuntimeError>
exception will be raised. If the content of the sequence is not a number, a
I<TypeError> exception will be raised.

=item meta

These are the meta data for this Value object.
It has to be a dictionary of numbers, strings or bools. All keys must be
strings. I<int> and <long> objects will be dispatched as signed integers unless
they are between 2**63 and 2**64-1, which will result in a unsigned integer.
You can force one of these storage classes by using the classes
B<collectd.Signed> and B<collectd.Unsigned>. A meta object received by a write
callback will always contain B<Signed> or B<Unsigned> objects.

=back
.TP
\fBNotification\fP
A notification is an object defining the severity and message of the status
message as well as an identification of a data instance.
.EX

class Notification(PluginData)

.EE

The Notification class is a wrapper around the collectd notification.
It can be used to notify other plugins about bad stuff happening. It works
similar to Values but has a severity and a message instead of interval
and time.
Notifications can be dispatched at any time and can be received with
register_notification.

Method resolution order:

=over 4

=item Notification

=item PluginData

=item object

=back

Methods defined here:

=over 4

=item B<dispatch>([type][, message][, plugin_instance][, type_instance][, plugin][, host][, time][, severity][, meta]) -> None.  Dispatch a notification.

Dispatch this instance to the collectd process. The object has members for each
of the possible arguments for this method. For a detailed explanation of these
parameters see the member of the same same.

If you do not submit a parameter the value saved in its member will be
submitted. If you do provide a parameter it will be used instead, without
altering the member.

=back

Data descriptors defined here:

=over 4

=item message

Some kind of description of what's going on and why this Notification was
generated.

=item severity

The severity of this notification. Assign or compare to \fBNOTIF_FAILURE\fP,
\fBNOTIF_WARNING\fP or \fBNOTIF_OKAY\fP.

.SH FUNCTIONS
The following functions provide the C-interface to Python-modules.

.TP
\fBregister_*\fP(\fIcallback\fP[, \fIdata\fP][, \fIname\fP]) -> \fIidentifier\fP
There are eight different register functions to get callback for eight
different events. With one exception all of them are called as shown above.
.RS
\fIcallback\fP is a callable object that will be called every time the event is
triggered.

\fIdata\fP is an optional object that will be passed back to the callback function
every time it is called. If you omit this parameter no object is passed back to
your callback, not even None.

\fIname>\fP is an optional identifier for this callback. The default name is
\fBpython\fP.\fImodule\fP. \fImodule\fP is taken from the \fB__module__\fP attribute of
your callback function. Every callback needs a unique identifier, so if you
want to register the same callback multiple times in the same module you need to
specify a name here. Otherwise it's safe to ignore this parameter.

\fIidentifier\fP is the full identifier assigned to this callback.
.RE
These functions are called in the various stages of the daemon (see the section
L<"WRITING YOUR OWN PLUGINS"> above) and are passed the following arguments:

.TP
\fBregister_config\fP
The only argument passed is a \fIConfig\fP object. See above for the layout of this
data type.
Note that you cannot receive the whole config files this way, only \fBmodule\fP
blocks inside the Python configuration block. Additionally you will only
receive blocks where your callback identifier matches \fBpython\fP.\fIblockname\fP.
.TP
\fBregister_init\fP
The callback will be called without arguments.
.TP
\fBregister_read\fP(\fIcallback\fP[, \fIinterval\fI][, \fIdata\fP][, \fIname\fP]) -> \fIidentifier\fP

This function takes an additional parameter: \fIinterval\fP. It specifies the
time between calls to the callback function.

The callback will be called without arguments.
.TP
\fBregister_shutdown\fP
The callback will be called without arguments.
.TP
\fBregister_write\fP
The callback function will be called with one argument passed, which will be a
\fIMetricFamily\fP object. For the layout of \fIMetricFamily\fP see above.
If this callback function throws an exception the next call will be delayed by
an increasing interval.
.TP
\fBregister_log\fP
The arguments are \fIseverity\fP and \fImessage\fP. The severity is an integer and
small for important messages and high for less important messages. The least
important level is \fBLOG_DEBUG\fP, the most important level is \fBLOG_ERR\fP. In
between there are (from least to most important): \fBLOG_INFO\fP, \fBLOG_NOTICE\fP,
and \fBLOG_WARNING\fP. \fImessage\fP is simply a string \fBwithout\fP a newline at the
end.

If this callback throws an exception it will \fBnot\fP be logged. It will just be
printed to \fBsys.stderr\fP which usually means silently ignored.
.TP
\fBregister_notification\fP
The only argument passed is a \fINotification\fP object. See above for the layout of this
data type.
.TP
\fBunregister_*\fP(\fIidentifier\fP) -> None
Removes a callback or data-set from collectd's internal list of callback
functions. Every \fIregister_*\fP function has an \fIunregister_*\fP function.
\fIidentifier\fP is either the string that was returned by the register function
or a callback function. The identifier will be constructed in the same way as
for the register functions.
.TP
\fBerror\fP, \fBwarning\fP, \fBnotice\fP, \fBinfo\fP, \fBdebug\fP(\fImessage\fP)
Log a message with the specified severity.

.SH EXAMPLES
Any Python module will start similar to:
.EX

  import ncollectd

.EE

A very simple read function might look like:
.EX

  import random

  def read(data=None):
    vl = collectd.Values(type='gauge')
    vl.plugin='python.spam'
    vl.dispatch(values=[random.random() * 100])
.EE

A very simple write function might look like:
.EX

  def write(vl, data=None):
    for i in vl.values:
      print "%s (%s): %f" % (vl.plugin, vl.type, i)

.EE

To register those functions with collectd:
.EX

  ncollectd.register_read(read)
  ncollectd.register_write(write)

.EE

See the section \fBCLASSES\fP above for a complete documentation of the data
types used by the read, write and match functions.

.SH CAVEATS
ncollectd is heavily multi-threaded. Each collectd thread accessing the Python
plugin will be mapped to a Python interpreter thread. Any such thread will be
created and destroyed transparently and on-the-fly.
.PP
Hence, any plugin has to be thread-safe if it provides several entry points
from collectd (i. e. if it registers more than one callback or if a
registered callback may be called more than once in parallel).
.PP
The Python thread module is initialized just before calling the init callbacks.
This means you must not use Python's threading module prior to this point. This
includes all config and possibly other callback as well.
.PP
The python plugin exports the internal API of collectd which is considered
unstable and subject to change at any time. We try hard to not break backwards
compatibility in the Python API during the life cycle of one major release.
However, this cannot be guaranteed at all times. Watch out for warnings
dispatched by the python plugin after upgrades.
.SH "SEE ALSO"
.BR ncollectd (1)
.BR ncollectd.conf (5)
