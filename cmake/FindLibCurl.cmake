include(FindPackageHandleStandardArgs)

include(CheckEnumExists)
include(CMakePushCheckState)

find_package(PkgConfig QUIET)
pkg_check_modules(PC_LIBCURL QUIET libcurl)

find_path(LIBCURL_INCLUDE_DIR NAMES curl/curl.h
          HINTS ${PC_LIBCURL_INCLUDEDIR} ${PC_LIBCURL_INCLUDE_DIRS})
find_library(LIBCURL_LIBRARIES NAMES curl
             HINTS ${PC_LIBCURL_LIBDIR} ${PC_LIBCURL_LIBRARY_DIRS})

cmake_push_check_state(RESET)
set(CMAKE_REQUIRED_INCLUDES ${LIBCURL_INCLUDE_DIR})
set(CMAKE_REQUIRED_LIBRARIES ${LIBCURL_LIBRARIES})

check_enum_exists(CURLOPT_USERNAME "curl/curl.h" HAVE_CURLOPT_USERNAME)
check_enum_exists(CURLOPT_TIMEOUT_MS "curl/curl.h" HAVE_CURLOPT_TIMEOUT_MS)
check_enum_exists(CURLINFO_SIZE_UPLOAD_T "curl/curl.h" HAVE_CURLINFO_SIZE_UPLOAD_T)
check_enum_exists(CURLINFO_SIZE_DOWNLOAD_T "curl/curl.h" HAVE_CURLINFO_SIZE_DOWNLOAD_T)
check_enum_exists(CURLINFO_SPEED_DOWNLOAD_T "curl/curl.h" HAVE_CURLINFO_SPEED_DOWNLOAD_T)
check_enum_exists(CURLINFO_SPEED_UPLOAD_T "curl/curl.h" HAVE_CURLINFO_SPEED_UPLOAD_T)
check_enum_exists(CURLINFO_CONTENT_LENGTH_DOWNLOAD_T "curl/curl.h" HAVE_CURLINFO_CONTENT_LENGTH_DOWNLOAD_T)
check_enum_exists(CURLINFO_CONTENT_LENGTH_UPLOAD_T "curl/curl.h" HAVE_CURLINFO_CONTENT_LENGTH_UPLOAD_T)
check_enum_exists(CURLOPT_UNIX_SOCKET_PATH "curl/curl.h" HAVE_CURLOPT_UNIX_SOCKET_PATH)
check_enum_exists(CURLINFO_APPCONNECT_TIME "curl/curl.h" HAVE_CURLINFO_APPCONNECT_TIME)

cmake_pop_check_state()

set(LIBCURL_VERSION "${PC_LIBCURL_VERSION}")

find_package_handle_standard_args(LibCurl REQUIRED_VARS LIBCURL_LIBRARIES LIBCURL_INCLUDE_DIR
	                                 VERSION_VAR LIBCURL_VERSION)

mark_as_advanced(LIBCURL_INCLUDE_DIR LIBCURL_LIBRARIES LIBCURL_VERSION)

if(LIBCURL_FOUND AND NOT TARGET LibCurl::LibCurl)
    set(LIBCURL_INCLUDE_DIRS "${LIBCURL_INCLUDE_DIR}")
    set(LIBCURL_CFLAGS ${PC_LIBCURL_CFLAGS_OTHER})
    if(HAVE_CURLOPT_USERNAME)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLOPT_USERNAME)
    endif()
    if(HAVE_CURLOPT_TIMEOUT_MS)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLOPT_TIMEOUT_MS)
    endif()
    if(HAVE_CURLINFO_SIZE_UPLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_SIZE_UPLOAD_T)
    endif()
    if(HAVE_CURLINFO_SIZE_DOWNLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_SIZE_DOWNLOAD_T)
    endif()
    if(HAVE_CURLINFO_SPEED_DOWNLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_SPEED_DOWNLOAD_T)
    endif()
    if(HAVE_CURLINFO_SPEED_UPLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_SPEED_UPLOAD_T)
    endif()
    if(HAVE_CURLINFO_CONTENT_LENGTH_DOWNLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_CONTENT_LENGTH_DOWNLOAD_T)
    endif()
    if(HAVE_CURLINFO_CONTENT_LENGTH_UPLOAD_T)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_CONTENT_LENGTH_UPLOAD_T)
    endif()
    if(HAVE_CURLOPT_UNIX_SOCKET_PATH)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLOPT_UNIX_SOCKET_PATH)
    endif()
    if(HAVE_CURLINFO_APPCONNECT_TIME)
        list(APPEND LIBCURL_DEFINITIONS HAVE_CURLINFO_APPCONNECT_TIME)
    endif()

    add_library(LibCurl::LibCurl INTERFACE IMPORTED)
    set_target_properties(LibCurl::LibCurl PROPERTIES
                          INTERFACE_COMPILE_FLAGS       "${LIBCURL_CFLAGS}"
                          INTERFACE_COMPILE_DEFINITIONS "${LIBCURL_DEFINITIONS}"
                          INTERFACE_INCLUDE_DIRECTORIES "${LIBCURL_INCLUDE_DIRS}"
                          INTERFACE_LINK_LIBRARIES      "${LIBCURL_LIBRARIES}")
endif()
