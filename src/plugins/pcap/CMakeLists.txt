plugin_option(PLUGIN_PCAP "Traffic analysis" ON)

include(CheckIncludeFiles)
include(CheckStructHasMember)
include(CheckCSourceCompiles)
include(CMakePushCheckState)

set(BUILD_PLUGIN_PCAP 0)

if(PLUGIN_PCAP)
    check_include_files("sys/types.h;sys/time.h;net/bpf.h" HAVE_NET_BPF_H)

    set(_INC_NETINET_IP6)
    if(HAVE_SYS_TYPES_H)
        list(APPEND _INC_NETINET_IP6 sys/types.h)
    endif()
    if(HAVE_SYS_SOCKET_H)
        list(APPEND _INC_NETINET_IP6 sys/socket.h)
    endif()
    if(HAVE_NETINET_IN_H)
        list(APPEND _INC_NETINET_IP6 netinet/in.h)
    endif()
    list(APPEND _INC_NETINET_IP6 netinet/ip6.h)
    check_struct_has_member("struct ip6_ext" "ip6e_len" "${_INC_NETINET_IP6}" HAVE_STRUCT_IP6_EXT)

    set(_INC_STRUCT_UDPHDR)
    if(HAVE_SYS_TYPES_H)
        list(APPEND _INC_STRUCT_UDPHDR sys/types.h)
    endif()
    if(HAVE_NETINET_IN_H)
        list(APPEND _INC_STRUCT_UDPHDR netinet/in.h)
    endif()
    list(APPEND _INC_STRUCT_UDPHDR netinet/udp.h)
    check_struct_has_member("struct udphdr" uh_dport "${_INC_STRUCT_UDPHDR}" HAVE_STRUCT_UDPHDR_UH_DPORT)
    check_struct_has_member("struct udphdr" uh_sport "${_INC_STRUCT_UDPHDR}" HAVE_STRUCT_UDPHDR_UH_SPORT)
    check_struct_has_member("struct udphdr" dest     "${_INC_STRUCT_UDPHDR}" HAVE_STRUCT_UDPHDR_DEST)
    check_struct_has_member("struct udphdr" source   "${_INC_STRUCT_UDPHDR}" HAVE_STRUCT_UDPHDR_SOURCE)

    find_package(LibPcap)
    if(LIBPCAP_FOUND)
        cmake_push_check_state(RESET)
        set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
        set(CMAKE_REQUIRED_INCLUDES ${LIBPCAP_INCLUDE_DIR})
        set(CMAKE_REQUIRED_LIBRARIES ${LIBPCAP_LIBRARIES})
        check_c_source_compiles("
#include <pcap.h>
int main(void)
{
    if(pcap_statustostr(PCAP_ERROR) != NULL)
        return 0;
    return 1;
}
" HAVE_PCAP_STATUSTOSTR)
        cmake_pop_check_state()

        set(BUILD_PLUGIN_PCAP 1)
    else()
        set(BUILD_PLUGIN_PCAP_REASON "libpcap not found" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_PCAP ${BUILD_PLUGIN_PCAP} PARENT_SCOPE)

if(BUILD_PLUGIN_PCAP)
    set(PLUGIN_PCAP_SRC pcap.c dns.c dns.h)
    if(HAVE_PCAP_STATUSTOSTR)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_PCAP_STATUSTOSTR)
    endif()
    if(HAVE_NET_BPF_H)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_NET_BPF_H)
    endif()
    if(HAVE_STRUCT_IP6_EXT)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_STRUCT_IP6_EXT)
    endif()
    if(HAVE_STRUCT_UDPHDR_UH_DPORT)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_STRUCT_UDPHDR_UH_DPORT)
    endif()
    if(HAVE_STRUCT_UDPHDR_UH_SPORT)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_STRUCT_UDPHDR_UH_SPORT)
    endif()
    if(HAVE_STRUCT_UDPHDR_DEST)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_STRUCT_UDPHDR_DEST)
    endif()
    if(HAVE_STRUCT_UDPHDR_SOURCE)
        list(APPEND PLUGIN_PCAP_DEFINITIONS HAVE_STRUCT_UDPHDR_SOURCE)
    endif()
    add_library(pcap MODULE ${PLUGIN_PCAP_SRC})
    target_link_libraries(pcap PRIVATE libutils libmetric LibPcap::LibPcap)
    target_compile_definitions(pcap PUBLIC ${PLUGIN_PCAP_DEFINITIONS})
    set_target_properties(pcap PROPERTIES PREFIX "")
    install(TARGETS pcap DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-pcap.5 ncollectd-pcap.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-pcap.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
