.\" SPDX-License-Identifier: GPL-2.0-only
.TH ncollectd-java 5 "@NCOLLECTD_DATE@" "@NCOLLECTD_VERSION@" "ncollectd java man page"
.SH NAME
ncollectd-java \- Documentation of ncollectd's java plugin
.SH SYNOPSIS
\fBload-plugin\fP java
.br
\fBplugin\fP java {
    \fBjvm-arg\fP "\fIarg\fP"
.sp 2
    \fBload-plugin\fP "\fIjava-class\fP"
    \fBplugin\fP "\fIname\fP" {
        # To be parsed by the plugin
    }
.br
}
.SH DESCRIPTION
The \fBjava\fP plugin embeds a \fIJava Virtual Machine\fP (JVM) into \fBncollectd\fP and
provides a Java interface to part of collectd's API. This makes it possible to
write additions to the daemon in Java.

Example:

.EX
plugin "java" {
    jvm-arg "-verbose:jni"
    jvm-arg "-Djava.class.path=/opt/ncollectd/lib/ncollectd/bindings/java"
    load-plugin "org.ncollectd.java.Foobar"
    plugin "org.ncollectd.java.Foobar" {
        # To be parsed by the plugin
    }
}
.EE

Available configuration options:
.TP
\fBjvm-arg\fP "\fIarg\fP"
Argument that is to be passed to the \fIJava Virtual Machine\fP (JVM). This works
exactly the way the arguments to the \fIjava\fP binary on the command line work.
Execute \f(CWjava --help\fP for details.

Please note that \fBall\fP these options must appear \fBbefore\fP (i. e. above)
any other options! When another option is found, the JVM will be started and
later options will have to be ignored!
.TP
\fBload-plugin\fP "\fIjava-class\fP"
Instantiates a new \fIjava-class\fP object. The constructor of this object very
likely then registers one or more callback methods with the server.

When the first such option is found, the virtual machine (JVM) is created. This
means that all \fBjvm-arg\fP options must appear before (i. e. above) all
\fBload-plugin\fP options!
.TP
\fBplugin\fP "\fIname\fP"
The entire block is passed to the Java plugin as an
\f(CWorg.ncollectd.api.ConfigItem\fP object.

For this to work, the plugin has to register a configuration callback first,
see. This means, that the \fBplugin\fP block
must appear after the appropriate \fBload-plugin\fP block. Also note, that \fIname\fP
depends on the (Java) plugin registering the callback and is completely
independent from the \fIjava-class\fP argument passed to \fBload-plugin\fP.

.SH OVERVIEW

When writing additions for collectd in Java, the underlying C base is mostly
hidden from you. All complex data types are converted to their Java counterparts
before they're passed to your functions. These Java classes reside in the
\f(CWorg.ncollectd.api\fP namespace.

The \fBjava\fP plugin will create one object of each class configured with the
\fBload-plugin\fP option. The constructor of this class can then register "callback
methods", i. e. methods that will be called by the daemon when appropriate.

The available classes are:

.TP
\fBorg.ncollectd.api.Collectd\fP
All API functions exported to Java are implemented as static functions of this
class. See \fBEXPORTED API FUNCTIONS\fP below.
.TP
\fBorg.ncollectd.api.ConfigValue\fP
Corresponds to \f(CWconfig_value_t\fP, defined in \f(CWsrc/libconfig/config.h\fP.
.TP
\fBorg.ncollectd.api.ConfigItem\fP
Corresponds to \f(CWconfig_item_t\fP, defined in \f(CWsrc/libconfig/config.h\fP.
.TP
\fBorg.ncollectd.api.Notification\fP
Corresponds to \f(CWnotification_t\fP, defined in \f(CWsrc/libmetric/notification.h\fP.

.PP

In the remainder of this document, we'll use the short form of these names, for
example \fBNotification\fP. In order to be able to use these abbreviated names, you
need to \fBimport\fP the classes.

.SH EXPORTED API FUNCTIONS

All collectd API functions that are available to Java plugins are implemented
as \fIpublic static\fP functions of the \fBCollectd\fP class. This makes
calling these functions pretty straight forward. For example, to send an error
message to the daemon, you'd do something like this:

  Collectd.logError ("That wasn't chicken!");

The following are the currently exported functions.
.SS registerConfig

Signature: \fIint\fP \fBregisterConfig\fP (\fIString\fP name, \fICollectdConfigInterface\fP object);

Registers the \fBconfig\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"config callback"\fP below.

.SS registerInit

Signature: \fIint\fP \fBregisterInit\fP (\fIString\fP name, \fICollectdInitInterface\fP object);

Registers the \fBinit\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"init callback"\fP below.

.SS registerRead

Signature: \fIint\fP \fBregisterRead\fP (\fIString\fP name, \fICollectdReadInterface\fP object)

Registers the \fBread\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"read callback"\fP below.

.SS registerWrite

Signature: \fIint\fP \fBregisterWrite\fP (\fIString\fP name, \fICollectdWriteInterface\fP object)

Registers the \fBwrite\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"write callback"\fP below.

.SS registerShutdown

Signature: \fIint\fP \fBregisterShutdown\fP (\fIString\fP name, \fICollectdShutdownInterface\fP object);

Registers the \fBshutdown\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"shutdown callback"\fP below.

.SS registerLog

Signature: \fIint\fP \fBregisterLog\fP (\fIString\fP name, \fICollectdLogInterface\fP object);

Registers the \fBlog\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"log callback"\fP below.

.SS registerNotification

Signature: \fIint\fP \fBregisterNotification\fP (\fIString\fP name, \fICollectdNotificationInterface\fP object);

Registers the \fBnotification\fP function of \fIobject\fP with the daemon.

Returns zero upon success and non-zero when an error occurred.

See \fB"notification callback"\fP below.

.SS dispatchMetricFamily

Signature: \fIint\fP \fBdispatchValues\fP (\fIValueList\fP)

Passes the values represented by the \fBValueList\fP object to the
C<plugin_dispatch_values\fP function of the daemon. The "data set" (or list of
"data sources") associated with the object are ignored, because
C<plugin_dispatch_values\fP will automatically lookup the required data set. It
is therefore absolutely okay to leave this blank.

Returns zero upon success or non-zero upon failure.

.SS logError

Signature: \fIvoid\fP \fBlogError\fP (\fIString\fP)

Sends a log message with severity \fBERROR\fP to the daemon.

.SS logWarning

Signature: \fIvoid\fP \fBlogWarning\fP (\fIString\fP)

Sends a log message with severity \fBWARNING\fP to the daemon.

.SS logNotice

Signature: \fIvoid\fP \fBlogNotice\fP (\fIString\fP)

Sends a log message with severity \fBNOTICE\fP to the daemon.

.SS logInfo

Signature: \fIvoid\fP \fBlogInfo\fP (\fIString\fP)

Sends a log message with severity \fBINFO\fP to the daemon.

.SS logDebug

Signature: \fIvoid\fP \fBlogDebug\fP (\fIString\fP)

Sends a log message with severity \fBDEBUG\fP to the daemon.

.SH REGISTERING CALLBACKS

When starting up, collectd creates an object of each configured class. The
constructor of this class should then register "callbacks" with the daemon,
using the appropriate static functions in \fBncollectd\fP,
see \fBEXPORTED API FUNCTIONS\fP above. To register a callback, the object being
passed to one of the register functions must implement an appropriate
interface, which are all in the \fBorg.ncollectd.api\fP namespace.

A constructor may register any number of these callbacks, even none. An object
without callback methods is never actively called by collectd, but may still
call the exported API functions. One could, for example, start a new thread in
the constructor and dispatch (submit to the daemon) values asynchronously,
whenever one is available.

Each callback method is now explained in more detail:

.SS config callback

Interface: \fBorg.collectd.api.CollectdConfigInterface\fP

Signature: \fIint\fP \fBconfig\fP (\fIOConfigItem\fP ci)

This method is passed a \fBOConfigItem\fP object, if both, method and
configuration, are available. \fBOConfigItem\fP is the root of a tree representing
the configuration for this plugin. The root itself is the representation of the
\fBE<lt\fPPlugin /E<gt\fP\fP block, so in next to all cases the children of the
root are the first interesting objects.

To signal success, this method has to return zero. Anything else will be
considered an error condition and the plugin will be disabled entirely.

See \fB"registerConfig"\fP above.

.SS init callback

Interface: \fBorg.collectd.api.CollectdInitInterface\fP

Signature: \fIint\fP \fBinit\fP ()

This method is called after the configuration has been handled. It is
supposed to set up the plugin. e. g. start threads, open connections, or
check if can do anything useful at all.

To signal success, this method has to return zero. Anything else will be
considered an error condition and the plugin will be disabled entirely.

See \fB"registerInit"\fP above.

.SS read callback

Interface: \fBorg.collectd.api.CollectdReadInterface\fP

Signature: \fIint\fP \fBread\fP ()

This method is called periodically and is supposed to gather statistics in
whatever fashion. These statistics are represented as a \fBValueList\fP object and
sent to the daemon using \fBdispatchValues|"dispatchValues"\fP.

To signal success, this method has to return zero. Anything else will be
considered an error condition and cause an appropriate message to be logged.
Currently, returning non-zero does not have any other effects. In particular,
Java "read"-methods are not suspended for increasing intervals like C
"read"-functions.

See \fB"registerRead"\fP above.

.SS write callback

Interface: \fBorg.collectd.api.CollectdWriteInterface\fP

Signature: \fIint\fP \fBwrite\fP (\fIValueList\fP vl)

This method is called whenever a value is dispatched to the daemon. The
corresponding C "write"-functions are passed a C<data_set_t\fP, so they can
decide which values are absolute values (gauge) and which are counter values.
To get the corresponding C<ListE<lt\fPDataSourceE<gt\fP\fP, call the \fBgetDataSource\fP
method of the \fBValueList\fP object.

To signal success, this method has to return zero. Anything else will be
considered an error condition and cause an appropriate message to be logged.

See \fB"registerWrite"\fP above.

.SS shutdown callback

Interface: \fBorg.collectd.api.CollectdShutdownInterface\fP

Signature: \fIint\fP \fBshutdown\fP ()

This method is called when the daemon is shutting down. You should not rely on
the destructor to clean up behind the object but use this function instead.

To signal success, this method has to return zero. Anything else will be
considered an error condition and cause an appropriate message to be logged.

See \fB"registerShutdown"\fP above.

.SS log callback

Interface: \fBorg.collectd.api.CollectdLogInterface\fP

Signature: \fIvoid\fP \fBlog\fP (\fIint\fP severity, \fIString\fP message)

This callback can be used to receive log messages from the daemon.

The argument \fIseverity\fP is one of:

.RS
.IP \(bu 2
\fBorg.ncollectd.api.Collectd.LOG_ERR\fP
.IP \(bu 2
\fBorg.ncollectd.api.Collectd.LOG_WARNING\fP
.IP \(bu 2
\fBorg.ncollectd.api.Collectd.LOG_NOTICE\fP
.IP \(bu 2
\fBorg.ncollectd.api.Collectd.LOG_INFO\fP
.IP \(bu 2
\fBorg.ncollectd.api.Collectd.LOG_DEBUG\fP
.RE

The function does not return any value.

See \fB"registerLog"\fP above.

.SS notification callback

Interface: \fBorg.collectd.api.CollectdNotificationInterface\fP

Signature: \fIint\fP \fBnotification\fP (\fINotification\fP n)

This callback can be used to receive notifications from the daemon.

To signal success, this method has to return zero. Anything else will be
considered an error condition and cause an appropriate message to be logged.

See \fB"registerNotification"\fP above.

.SH EXAMPLE

This short example demonstrates how to register a read callback with the
daemon:

  import org.collectd.api.Collectd;
  import org.collectd.api.ValueList;

  import org.collectd.api.CollectdReadInterface;

  public class Foobar implements CollectdReadInterface
  {
    public Foobar ()
    {
      Collectd.registerRead ("Foobar", this);
    }

    public int read ()
    {
      ValueList vl;

      /* Do something... */

      Collectd.dispatchValues (vl);
    }
  }

.SH PLUGINS
The following plugins are implemented in \fIJava\fP. Both, the \fBload-plugin\fP
option and the \fBplugin\fP block must be inside the
\fBplugin\fP \fIjava\fP block (see above).

.SS GenericJMX plugin
The GenericJMX plugin reads \fIManaged Beans\fP (MBeans) from an \fIMBeanServer\fP
using JMX. JMX is a generic framework to provide and query various management
information. The interface is used by Java processes to provide internal
statistics as well as by the \fIJava Virtual Machine\fP (JVM) to provide
information about the memory used, threads and so on.

The configuration of the \fIGenericJMX plugin\fP consists of two blocks: \fIMBean\fP
blocks that define a mapping of MBean attributes to the “metrics” used by
\fBncollectd\fP, and \fBConnection\fP blocks which define the parameters needed to
connect to an \fIMBeanServer\fP and what data to collect. The configuration of the
\fISNMP plugin\fP is similar in nature, in case you know it.
.PP
\fBplugin\fP \fIjava\fP {
    \fBjvm-arg\fP "\fI-Djava.class.path=/usr/share/ncollectd/java/collectd-api.jar:/usr/share/ncollectd/java/generic-jmx.jar\fP"
    \fBload-plugin\fP  "\fIorg.ncollectd.java.GenericJMX\fP"
    \fBplugin\fP GenericJMX {
        \fBmbean\fP \fIname\fP {
            \fBobject-name\fP "\fIpattern\fP"
            \fBlabel\fP \fIkey\fP \fIvalue\fP
            \fBlabel-from\fP \fIkey\fP \fIproperty\fP
            \fBmetrix-prefix\fP "\fIprefix\fP"
            \fBmetric\fP \fIname\fP {
                \fBlabel\fP \fIkey\fP \fIvalue\fP
                \fBlabel-from\fP \fIkey\fP \fIproperty\fP
                \fBtype\fP \fIunknown|gauge|counter\fP
                \fBtable\fP \fItrue|false\fP
                \fBattribute\fP \fIattribute\fP
            }
        }
        \fBconnection\fP {
            \fBservice-url\fP \fIurl\fP
            \fBlabel\fP \fIkey\fP \fIvalue\fP
            \fBcollect\fP \fImbean\fP
            \fBuser\fP \fIuser\fP
            \fBpassword\fP \fIpassword\fP
        }
    }
.br
}
.PP
.TP
\fBmbean blocks\fP

\fImbean\fP blocks specify what data is retrieved from \fImbeans\fP and how that data
is mapped on the \fIncollectd\f\fP metrics. The block requires one string
argument, a name. This name is used in the \fIConnection\fP blocks (see below) to
refer to a specific \fImbean\fP block. Therefore, the names must be unique.

The following options are recognized within \fImbean\fP blocks:
.RS
.TP
\fBobject-name\fP \fIpattern\fP
Sets the pattern which is used to retrieve \fIMBeans\fP from the \fIMBeanServer\fP.
If more than one MBean is returned you should use the \fBlabel-from\fP option
(see below) to make the identifiers unique.

See also:
\fBhttp://java.sun.com/javase/6/docs/api/javax/management/ObjectName.html\fP

.TP
\fBlabel\fP \fIkey\fP \fIvalue\fP
.TP
\fBlabel-from\fP \fIkey\fP \fIproperty\fP
The \fIobject names\fP used by JMX to identify \fIMBeans\fP include so called
“\fIproperties\fP” which are basically key-value-pairs. If the given object name
is not unique and multiple MBeans are returned, the values of those properties
usually differ. 
.TP
\fBmetrix-prefix\fP "\fIprefix\fP"
.TP
\fBmetric\fP \fIname\fP
The \fBmetric\fP blocks map one or more attributes of an \fImben\fP to a value list
in \fIncollectd\fP. There must be at least one Value block within each \fIMBean\fP
block.
.RS
.TP
\fBlabel\fP \fIkey\fP \fIvalue\fP
.TP
\fBlabel-from\fP \fIkey\fP \fIproperty\fP
.TP
\fBtype\fP \fIunknown|gauge|counter\fP
.TP
\fBtable\fP \fItrue|false\fP
Set this to true if the returned attribute is a \fIcomposite type\fP. If set to
true, the keys within the \fIcomposite type\fP is appended to the \fItype instance\fP.
.TP
\fBattribute\fP \fIattribute\fP
Sets the name of the attribute from which to read the value. You can access the
keys of composite types by using a dot to concatenate the key name to the
attribute name. For example: “attrib0.key42”. If \fBtable\fP is set to \fBtrue\fP
\fIpath\fP must point to a \fIcomposite type\fP, otherwise it must point to a numeric
type.
.RE
.RE
.TP
\fBconnection\fP
Connection blocks specify \fIhow\fP to connect to an \fIMBeanServer\fP and what data
to retrieve. The following configuration options are available:
.RS
.TP
\fBservice-url\fP \fIurl\fP
Specifies how the \fIMBeanServer\fP can be reached. Any string accepted by the
\fIJMXServiceURL\fP is valid.

See also:
\fBhttp://java.sun.com/javase/6/docs/api/javax/management/remote/JMXServiceURL.html\fP
.TP
\fBlabel\fP \fIkey\fP \fIvalue\fP
.TP
\fBcollect\fP \fImbean\fP
Configures which of the \fIMBean\fP blocks to use with this connection. May be
repeated to collect multiple \fIMBeans\fP from this server.
.TP
\fBuser\fP \fIuser\fP
Use \fIuser\fP to authenticate to the server. If not configured, “monitorRole”
will be used.
.TP
\fBpassword\fP \fIpassword\fP
Use \fIpassword\fP to authenticate to the server. If not given, unauthenticated
access is used.
.RE
.SH "SEE ALSO"
.BR ncollectd (1)
.BR ncollectd.conf (5)
