plugin_option(PLUGIN_PROCESSES "Process statistics" ON)

include(CheckIncludeFile)
include(CheckLibraryExists)
include(CheckFunctionExists)
include(CheckStructHasMember)

set(BUILD_PLUGIN_PROCESSES 0)

if(PLUGIN_PROCESSES)
    if(BUILD_LINUX)
        check_include_file(linux/config.h HAVE_LINUX_CONFIG_H)
        find_package(LibMnl)
        if(LIBMNL_FOUND)
            set(BUILD_PLUGIN_PROCESSES 1)
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "libmnl not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_FREEBSD)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_library_exists(kvm kvm_getprocs "" HAVE_LIBKVM_GETPROCS)
            if(HAVE_LIBKVM_GETPROCS)
                check_struct_has_member("struct kinfo_proc" "ki_pid" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KI_PID)
                check_struct_has_member("struct kinfo_proc" "ki_rssize" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KI_RSSIZE)
                check_struct_has_member("struct kinfo_proc" "ki_rusage" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KI_RUSAGE)
                if(HAVE_STRUCT_KINFO_PROC_KI_PID AND HAVE_STRUCT_KINFO_PROC_KI_RSSIZE AND HAVE_STRUCT_KINFO_PROC_KI_RUSAGE)
                    set(HAVE_STRUCT_KINFO_PROC_FREEBSD 1)
                    set(BUILD_PLUGIN_PROCESSES 1)
                else()
                    set(BUILD_PLUGIN_PROCESSES_REASON "missing fields in struct kinfo_proc" PARENT_SCOPE)
                endif()
            else()
                set(BUILD_PLUGIN_PROCESSES_REASON "kvm_getprocs not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_DRAGONFLY)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_library_exists(kvm kvm_getprocs "" HAVE_LIBKVM_GETPROCS)
            if(HAVE_LIBKVM_GETPROCS)
                check_struct_has_member("struct kinfo_proc" "kp_pid" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KP_PID)
                check_struct_has_member("struct kinfo_proc" "kp_vm_rssize" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KP_VM_RSSIZE)
                check_struct_has_member("struct kinfo_proc" "kp_vm_swrss" "sys/types.h;sys/user.h;kvm.h" HAVE_STRUCT_KINFO_PROC_KP_VM_SWRSS)
                if(HAVE_STRUCT_KINFO_PROC_KP_PID AND HAVE_STRUCT_KINFO_PROC_KP_VM_RSSIZE AND HAVE_STRUCT_KINFO_PROC_KP_VM_SWRSS)
                    set(HAVE_STRUCT_KINFO_PROC_DRAGONFLY 1)
                    set(BUILD_PLUGIN_PROCESSES 1)
                else()
                    set(BUILD_PLUGIN_PROCESSES_REASON "missing fields in struct kinfo_proc" PARENT_SCOPE)
                endif()
            else()
                set(BUILD_PLUGIN_PROCESSES_REASON "kvm_getprocs not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_NETBSD)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_library_exists(kvm kvm_getprocs "" HAVE_LIBKVM_GETPROCS)
            if(HAVE_LIBKVM_GETPROCS)
                check_struct_has_member("struct kinfo_proc2" "p_pid" "sys/types.h;sys/sysctl.h;kvm.h" HAVE_STRUCT_KINFO_PROC2_P_PID)
                check_struct_has_member("struct kinfo_proc2" "p_uru_maxrss" "sys/types.h;sys/sysctl.h;kvm.h" HAVE_STRUCT_KINFO_PROC2_P_URU_MAXRSS)
                if(HAVE_STRUCT_KINFO_PROC2_P_PID AND HAVE_STRUCT_KINFO_PROC2_P_URU_MAXRSS)
                    set(HAVE_STRUCT_KINFO_PROC2_NETBSD 1)
                    set(BUILD_PLUGIN_PROCESSES 1)
                else()
                    set(BUILD_PLUGIN_PROCESSES_REASON "missing fields in struct kinfo_proc2" PARENT_SCOPE)
                endif()
            else()
                set(BUILD_PLUGIN_PROCESSES_REASON "kvm_getprocs not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_OPENBSD)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_library_exists(kvm kvm_getprocs "" HAVE_LIBKVM_GETPROCS)
            if(HAVE_LIBKVM_GETPROCS)
                check_struct_has_member("struct kinfo_proc" "p_pid" "sys/types.h;kvm.h" HAVE_STRUCT_KINFO_PROC_P_PID)
                check_struct_has_member("struct kinfo_proc" "p_rssize" "sys/types.h;kvm.h" HAVE_STRUCT_KINFO_PROC_P_RSSIZE)
                if(HAVE_STRUCT_KINFO_PROC_P_PID AND HAVE_STRUCT_KINFO_PROC_P_RSSIZE)
                    set(HAVE_STRUCT_KINFO_PROC_OPENBSD 1)
                    set(BUILD_PLUGIN_PROCESSES 1)
                else()
                    set(BUILD_PLUGIN_PROCESSES_REASON "missing fields in struct kinfo_proc" PARENT_SCOPE)
                endif()
            else()
                set(BUILD_PLUGIN_PROCESSES_REASON "kvm_getprocs not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_AIX)
        find_package(LibPerfstat)
        check_include_file(procinfo.h HAVE_PROCINFO_H)
        if(LIBPERFSTAT_FOUND AND HAVE_PROCINFO_H)
            set(BUILD_PLUGIN_PROCESSES 1)
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "perstat not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_SOLARIS)
        find_package(LibKstat)
        if(LIBKSTAT_FOUND)
            set(BUILD_PLUGIN_PROCESSES 1)
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "kstat not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_DARWIN)
        check_function_exists(thread_info HAVE_THREAD_INFO)
        if(HAVE_THREAD_INFO)
            set(BUILD_PLUGIN_PROCESSES 1)
        else()
            set(BUILD_PLUGIN_PROCESSES_REASON "thread_info not found" PARENT_SCOPE)
        endif()
    else()
        set(BUILD_PLUGIN_PROCESSES_REASON "unsupported system" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_PROCESSES ${BUILD_PLUGIN_PROCESSES} PARENT_SCOPE)

if(BUILD_PLUGIN_PROCESSES)
    set(PLUGIN_PROCESSES_SRC processes.c processes.h)
    set(PLUGIN_PROCESSES_LIBS libutils libmetric)

    if(BUILD_LINUX)
        list(APPEND PLUGIN_PROCESSES_SRC processes_linux.c taskstats.c taskstats.h)
        list(APPEND PLUGIN_PROCESSES_LIBS LibMnl::LibMnl)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_TASKSTATS)
        if(HAVE_LINUX_CONFIG_H)
            list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_LINUX_CONFIG_H)
        endif()
    elseif(BUILD_FREEBSD)
        list(APPEND PLUGIN_PROCESSES_SRC processes_freebsd.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_LIBKVM_GETPROCS)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_STRUCT_KINFO_PROC_FREEBSD)
    elseif(BUILD_DRAGONFLY)
        list(APPEND PLUGIN_PROCESSES_SRC processes_dragonfly.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_LIBKVM_GETPROCS)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_STRUCT_KINFO_PROC_DRAGONFLY)
    elseif(BUILD_NETBSD)
        list(APPEND PLUGIN_PROCESSES_SRC processes_netbsd.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_LIBKVM_GETPROCS)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_STRUCT_KINFO_PROC2_NETBSD)
    elseif(BUILD_OPENBSD)
        list(APPEND PLUGIN_PROCESSES_SRC processes_openbsd.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_LIBKVM_GETPROCS)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_STRUCT_KINFO_PROC_OPENBSD)
    elseif(BUILD_AIX)
        list(APPEND PLUGIN_PROCESSES_SRC processes_aix.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibPerfstat::LibPerfstat)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS PUBLIC HAVE_PROCINFO_H)
    elseif(BUILD_SOLARIS)
        list(APPEND PLUGIN_PROCESSES_SRC processes_solaris.c)
        list(APPEND PLUGIN_PROCESSES_LIBS LibKstat::LibKstat)
    elseif(BUILD_DARWIN)
        list(APPEND PLUGIN_PROCESSES_SRC processes_darwin.c)
        list(APPEND PLUGIN_PROCESSES_DEFINITIONS HAVE_THREAD_INFO)
    endif()

    add_library(processes MODULE ${PLUGIN_PROCESSES_SRC})
    target_link_libraries(processes PRIVATE ${PLUGIN_PROCESSES_LIBS})
    target_compile_definitions(processes PUBLIC ${PLUGIN_PROCESSES_DEFINITIONS})
    set_target_properties(processes PROPERTIES PREFIX "")

#    add_executable(test_plugin_processes EXCLUDE_FROM_ALL processes_test.c ${PLUGIN_PROCESSES_SRC})
#    target_link_libraries(test_plugin_processes libtest libutils libmetric -lm)
#    add_dependencies(build_tests test_plugin_processes)
#    add_test(NAME test_plugin_processes COMMAND test_plugin_processes WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    install(TARGETS processes DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-processes.5 ncollectd-processes.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-processes.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
