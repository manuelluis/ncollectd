/* SPDX-License-Identifier: GPL-2.0-only */
#pragma once

#include <stddef.h>

typedef enum {
    HTTP_HEADER_UNKOWN,
    HTTP_HEADER_ACCEPT,
    HTTP_HEADER_ACCEPT_CH,
    HTTP_HEADER_ACCEPT_CHARSET,
    HTTP_HEADER_ACCEPT_DATETIME,
    HTTP_HEADER_ACCEPT_ENCODING,
    HTTP_HEADER_ACCEPT_LANGUAGE,
    HTTP_HEADER_ACCEPT_PATCH,
    HTTP_HEADER_ACCEPT_RANGES,
    HTTP_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS,
    HTTP_HEADER_ACCESS_CONTROL_ALLOW_HEADERS,
    HTTP_HEADER_ACCESS_CONTROL_ALLOW_METHODS,
    HTTP_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,
    HTTP_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS,
    HTTP_HEADER_ACCESS_CONTROL_MAX_AGE,
    HTTP_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
    HTTP_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
    HTTP_HEADER_AGE,
    HTTP_HEADER_A_IM,
    HTTP_HEADER_ALLOW,
    HTTP_HEADER_ALT_SVC,
    HTTP_HEADER_AUTHORIZATION,
    HTTP_HEADER_CACHE_CONTROL,
    HTTP_HEADER_CONNECTION,
    HTTP_HEADER_CONTENT_DISPOSITION,
    HTTP_HEADER_CONTENT_ENCODING,
    HTTP_HEADER_CONTENT_LANGUAGE,
    HTTP_HEADER_CONTENT_LENGTH,
    HTTP_HEADER_CONTENT_LOCATION,
    HTTP_HEADER_CONTENT_RANGE,
    HTTP_HEADER_CONTENT_SECURITY_POLICY,
    HTTP_HEADER_CONTENT_TYPE,
    HTTP_HEADER_COOKIE,
    HTTP_HEADER_DATE,
    HTTP_HEADER_DELTA_BASE,
    HTTP_HEADER_DNT,
    HTTP_HEADER_ETAG,
    HTTP_HEADER_EXPECT,
    HTTP_HEADER_EXPECT_CT,
    HTTP_HEADER_EXPIRES,
    HTTP_HEADER_FORWARDED,
    HTTP_HEADER_FROM,
    HTTP_HEADER_FRONT_END_HTTPS,
    HTTP_HEADER_HOST,
    HTTP_HEADER_IF_MATCH,
    HTTP_HEADER_IF_MODIFIED_SINCE,
    HTTP_HEADER_IF_NONE_MATCH,
    HTTP_HEADER_IF_RANGE,
    HTTP_HEADER_IF_UNMODIFIED_SINCE,
    HTTP_HEADER_IM,
    HTTP_HEADER_LAST_MODIFIED,
    HTTP_HEADER_LINK,
    HTTP_HEADER_LOCATION,
    HTTP_HEADER_MAX_FORWARDS,
    HTTP_HEADER_NEL,
    HTTP_HEADER_ORIGIN,
    HTTP_HEADER_P3P,
    HTTP_HEADER_PERMISSIONS_POLICY,
    HTTP_HEADER_PRAGMA,
    HTTP_HEADER_PREFER,
    HTTP_HEADER_PREFERENCE_APPLIED,
    HTTP_HEADER_PROXY_AUTHENTICATE,
    HTTP_HEADER_PROXY_AUTHORIZATION,
    HTTP_HEADER_PROXY_CONNECTION,
    HTTP_HEADER_PUBLIC_KEY_PINS,
    HTTP_HEADER_RANGE,
    HTTP_HEADER_REFERER,
    HTTP_HEADER_REFRESH,
    HTTP_HEADER_REPORT_TO,
    HTTP_HEADER_RETRY_AFTER,
    HTTP_HEADER_SAVE_DATA,
    HTTP_HEADER_SERVER,
    HTTP_HEADER_SET_COOKIE,
    HTTP_HEADER_STATUS,
    HTTP_HEADER_STRICT_TRANSPORT_SECURITY,
    HTTP_HEADER_TE,
    HTTP_HEADER_TIMING_ALLOW_ORIGIN,
    HTTP_HEADER_TK,
    HTTP_HEADER_TRAILER,
    HTTP_HEADER_TRANSFER_ENCODING,
    HTTP_HEADER_UPGRADE,
    HTTP_HEADER_UPGRADE_INSECURE_REQUESTS,
    HTTP_HEADER_USER_AGENT,
    HTTP_HEADER_VARY,
    HTTP_HEADER_VIA,
    HTTP_HEADER_WARNING,
    HTTP_HEADER_WWW_AUTHENTICATE,
    HTTP_HEADER_X_ATT_DEVICEID,
    HTTP_HEADER_X_CONTENT_DURATION,
    HTTP_HEADER_X_CONTENT_SECURITY_POLICY,
    HTTP_HEADER_X_CONTENT_TYPE_OPTIONS,
    HTTP_HEADER_X_CORRELATION_ID,
    HTTP_HEADER_X_CSRF_TOKEN,
    HTTP_HEADER_X_FORWARDED_FOR,
    HTTP_HEADER_X_FORWARDED_HOST,
    HTTP_HEADER_X_FORWARDED_PROTO,
    HTTP_HEADER_X_HTTP_METHOD_OVERRIDE,
    HTTP_HEADER_X_POWERED_BY,
    HTTP_HEADER_X_REDIRECT_BY,
    HTTP_HEADER_X_REQUESTED_WITH,
    HTTP_HEADER_X_REQUEST_ID,
    HTTP_HEADER_X_UA_COMPATIBLE,
    HTTP_HEADER_X_UIDH,
    HTTP_HEADER_X_WAP_PROFILE,
    HTTP_HEADER_X_WEBKIT_CSP,
    HTTP_HEADER_X_XSS_PROTECTION
} http_header_name_t;

typedef struct {
    http_header_name_t header_name;
    char *name;
    char *value;
} http_header_t;

typedef struct {
    size_t num;
    http_header_t *ptr;
} http_header_set_t;

int http_header_append(http_header_set_t *set, http_header_name_t header_name,
                                               const char *name, size_t name_len,
                                               const char *value, size_t value_len);

char *http_header_get(http_header_set_t *headers, http_header_name_t header_name, char *name);

void http_header_reset(http_header_set_t *headers);

const char *http_get_header(http_header_name_t header);

http_header_name_t http_get_header_name(const char *hdr, size_t len);
