plugin_option(PLUGIN_WRITE_AMQP "AMQP output plugin" YES)

set(BUILD_PLUGIN_WRITE_AMQP 0)

if(PLUGIN_WRITE_AMQP)
    find_package(LibRabbitmq)
    if (LIBRABBITMQ_FOUND)
        set(BUILD_PLUGIN_WRITE_AMQP 1)
    else()
        set(BUILD_PLUGIN_WRITE_AMQP_REASON "librabbitmq not found" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_WRITE_AMQP ${BUILD_PLUGIN_WRITE_AMQP} PARENT_SCOPE)

if(BUILD_PLUGIN_WRITE_AMQP)
    set(PLUGIN_WRITE_AMQP_SRC write_amqp.c)
    add_library(write_amqp MODULE ${PLUGIN_WRITE_AMQP_SRC})
    target_link_libraries(write_amqp PRIVATE libutils libmetric libxson libformat LibRabbitmq::LibRabbitmq)
    if(LIBRABBITMQ_HAVE_RABBITMQ_C_INCLUDE_PATH)
        target_compile_definitions(write_amqp PUBLIC HAVE_RABBITMQ_C_INCLUDE_PATH)
    endif()
    if(LIBRABBITMQ_HAVE_AMQP_TCP_SOCKET_H)
        target_compile_definitions(write_amqp PUBLIC HAVE_AMQP_TCP_SOCKET_H)
    endif()
    if(LIBRABBITMQ_HAVE_AMQP_SOCKET_H)
        target_compile_definitions(write_amqp PUBLIC HAVE_AMQP_SOCKET_H)
    endif()
    if(LIBRABBITMQ_HAVE_AMQP_TCP_SOCKET)
        target_compile_definitions(write_amqp PUBLIC HAVE_AMQP_TCP_SOCKET)
    endif()
    if(LIBRABBITMQ_HAVE_DECL_AMQP_SOCKET_CLOSE)
        target_compile_definitions(write_amqp PUBLIC HAVE_DECL_AMQP_SOCKET_CLOSE)
    endif()
    if(LIBRABBITMQ_HAVE_AMQP_RPC_REPLY_T_LIBRARY_ERRNO)
        target_compile_definitions(write_amqp PUBLIC HAVE_AMQP_RPC_REPLY_T_LIBRARY_ERRNO)
    endif()
    set_target_properties(write_amqp PROPERTIES PREFIX "")
    install(TARGETS write_amqp DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-write_amqp.5 ncollectd-write_amqp.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-write_amqp.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
