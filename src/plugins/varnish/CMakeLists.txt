plugin_option(PLUGIN_VARNISH "Varnish cache statistics" ON)

set(BUILD_PLUGIN_VARNISH 0)

if(PLUGIN_VARNISH)
    find_package(LibVarnishapi)
    if (LIBVARNISHAPI_FOUND)
        set(BUILD_PLUGIN_VARNISH 1)
    else()
        set(BUILD_PLUGIN_VARNISH_REASON "libvarnish not found" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_VARNISH ${BUILD_PLUGIN_VARNISH} PARENT_SCOPE)

if(BUILD_PLUGIN_VARNISH)
    gperf_generate(varnish_stats.gperf "${CMAKE_CURRENT_BINARY_DIR}/varnish_stats.c" VARNISH_STATS_C)
    set(PLUGIN_VARNISH_SRC varnish.c varnish_fam.c varnish_fam.h varnish_flags.h)
    add_library(varnish MODULE ${PLUGIN_VARNISH_SRC} ${VARNISH_STATS_C})
    target_link_libraries(varnish PRIVATE libutils libmetric LibVarnishapi::LibVarnishapi)
    if((LIBVARNISHAPI_VERSION EQUAL 6) OR (LIBVARNISHAPI_VERSION GREATER 6))
        target_compile_definitions(varnish PUBLIC HAVE_VARNISH_V6)
    elseif(LIBVARNISHAPI_VERSION EQUAL 5)
        target_compile_definitions(varnish PUBLIC HAVE_VARNISH_V5)
    elseif(LIBVARNISHAPI_VERSION EQUAL 4)
        target_compile_definitions(varnish PUBLIC HAVE_VARNISH_V4)
    elseif(LIBVARNISHAPI_VERSION EQUAL 3)
        target_compile_definitions(varnish PUBLIC HAVE_VARNISH_V3)
    elseif(LIBVARNISHAPI_VERSION EQUAL 2)
        target_compile_definitions(varnish PUBLIC HAVE_VARNISH_V2)
    endif()
    set_target_properties(varnish PROPERTIES PREFIX "")
    install(TARGETS varnish DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-varnish.5 ncollectd-varnish.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-varnish.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
