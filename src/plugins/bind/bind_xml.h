/* SPDX-License-Identifier: GPL-2.0-only                             */
/* SPDX-FileCopyrightText: Copyright (C) 2022-2024 Manuel Sanmartín  */
/* SPDX-FileContributor: Manuel Sanmartín <manuel.luis at gmail.com> */

#pragma once

typedef enum {
    BIND_XML_NONE,
    BIND_XML_STATISTICS,
    BIND_XML_STATISTICS_SERVER,
    BIND_XML_STATISTICS_SERVER_OPCODE,
    BIND_XML_STATISTICS_SERVER_RCODE,
    BIND_XML_STATISTICS_SERVER_QTYPE,
    BIND_XML_STATISTICS_SERVER_NSSTAT,
    BIND_XML_STATISTICS_SERVER_ZONESTAT,
    BIND_XML_STATISTICS_SERVER_SOCKSTAT,
    BIND_XML_STATISTICS_VIEWS,
    BIND_XML_STATISTICS_VIEW,
    BIND_XML_STATISTICS_VIEW_RESQTYPE,
    BIND_XML_STATISTICS_VIEW_RESSTATS,
    BIND_XML_STATISTICS_VIEW_CACHE,
    BIND_XML_STATISTICS_VIEW_CACHE_RRSET,
    BIND_XML_STATISTICS_VIEW_CACHE_RRSET_NAME,
    BIND_XML_STATISTICS_VIEW_CACHE_RRSET_COUNTER,
    BIND_XML_STATISTICS_VIEW_ADBSTAT,
    BIND_XML_STATISTICS_VIEW_CACHESTATS,
    BIND_XML_STATISTICS_MEMORY,
    BIND_XML_STATISTICS_MEMORY_SUMMARY,
    BIND_XML_STATISTICS_TRAFFIC,
    BIND_XML_STATISTICS_TRAFFIC_IPV4,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_UDP,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_UDP_REQUEST_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_UDP_REQUEST_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_UDP_RESPONSE_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_UDP_RESPONSE_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_TCP,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_TCP_REQUEST_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_TCP_REQUEST_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_TCP_RESPONSE_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV4_TCP_RESPONSE_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV6,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_UDP,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_UDP_REQUEST_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_UDP_REQUEST_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_UDP_RESPONSE_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_UDP_RESPONSE_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_TCP,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_TCP_REQUEST_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_TCP_REQUEST_SIZE_COUNTER,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_TCP_RESPONSE_SIZE,
    BIND_XML_STATISTICS_TRAFFIC_IPV6_TCP_RESPONSE_SIZE_COUNTER,
} bind_xml_key_t;

#define STACK_MAX_DEPTH 64
typedef struct {
    void *ctxt;
    char value1[256];
    char value2[256];
    bool data;
    bind_xml_key_t stack[STACK_MAX_DEPTH];
    size_t depth;
    metric_family_t *fams;
    label_set_t *labels;
    histogram_t *traffic[BIND_TRAFFIC_MAX];
} bind_xml_ctx_t;

int bind_xml_parse(bind_xml_ctx_t *ctx);

int bind_xml_parse_chunk(bind_xml_ctx_t *ctx, const char *data, int size);

int bind_xml_parse_end(bind_xml_ctx_t *ctx);
