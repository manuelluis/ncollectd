.\" SPDX-License-Identifier: GPL-2.0-only
.TH ncollectd-lua 5 "@NCOLLECTD_DATE@" "@NCOLLECTD_VERSION@" "ncollectd lua man page"
.SH NAME
ncollectd-lua \- Documentation of ncollectd's lua plugin
.SH SYNOPSIS
\fBload-plugin\fP lua
.br
\fBplugin\fP lua {
    \fBbase-path\fP \fI/path/to/your/lua/scripts\fP
    \fBscript\fP \fIscript.lua\fP
.br
}
.SH DESCRIPTION
The \fBlua\fP plugin embeds a Lua interpreter into collectd and provides an
interface to collectd's plugin system. This makes it possible to write plugins
for collectd in Lua.
.PP
The minimum required Lua version is \fI5.1\fP.
.TP
\fBbase-path\fP \fI/path/to/your/lua/scripts\fP
The directory the \fBlua\fP plugin looks in to find script \fBscript\fP.
If set, this is also prepended to \fBpackage.path\fP.
.TP
\fBscript\fP \fIscript.lua\fP
The script the \fBlua\fP plugin is going to run.
If \fBbase-path\fP is not specified, this needs to be an absolute path.

.SH WRITING YOUR OWN PLUGINS
Writing your own plugins is quite simple, ncollectd manages plugins by means of
\fBdispatch functions\fP which call the appropriate \fBcallback functions\fP
registered by the plugins. Any plugin basically consists of the implementation
of these callback functions and initializing code which registers the
functions with collectd. See the section \fBEXAMPLES\fP below for a really basic
example. The following types of \fBcallback functions\fP are implemented in the
Lua plugin (all of them are optional):

.TP
\fBread functions\fP
These are used to collect the actual data. It is called once
per interval (see the \fBinterval\fP configuration option of collectd). Usually
it will call \fBncollectd.dispatch_metric_family\fP to dispatch the metrics to ncollectd
which will pass them on to all registered \fBwrite functions\fP. If this function
does not return 0, interval between its calls will grow until function returns
0 again. See the \fBmax-read-interval\fP configuration option of ncollectd.
.TP
\fBwrite functions\fP
These are used to write the dispatched values. They are called
once for every value that was dispatched by any plugin.

.SH FUNCTIONS
The following functions are provided to Lua modules:
.TP
\fBregister_read\fP(\fIcallback\fP)
Function to register read callbacks.
The callback will be called without arguments.
If this callback function does not return 0 the next call will be delayed by
an increasing interval.
.TP
\fBregister_write\fP(\fIcallback\fP)
Function to register write callbacks.
The callback function will be called with one argument passed, which will be a
table of values.
If this callback function does not return 0 next call will be delayed by
an increasing interval.
.TP
\fBlog_error, log_warning, log_notice, log_info, log_debug\fP(\fImessage\fP)
Log a message with the specified severity.

.SH EXAMPLES
A very simple read function might look like:

.EX
  function read()
    collectd.log_info("read function called")
    t = {
        host = 'localhost',
        plugin = 'myplugin',
        type = 'counter',
        values = {42},
    }
    collectd.dispatch_values(t)
    return 0
  end
.EE
.PP
A very simple write function might look like:

.EX
  function write(vl)
    for i = 1, #vl.values do
      collectd.log_info(vl.host .. '.' .. vl.plugin .. '.' .. vl.type .. ' ' .. vl.values[i])
    end
    return 0
  end
.EE
.PP
To register those functions with collectd:

.EX
  collectd.register_read(read)     -- pass function as variable
  collectd.register_write("write") -- pass by global-scope function name
.EE
.SH "SEE ALSO"
.BR ncollectd (1)
.BR ncollectd.conf (5)
