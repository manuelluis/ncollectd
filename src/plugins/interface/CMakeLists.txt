plugin_option(PLUGIN_INTERFACE "Interface traffic statistics" ON)

include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckEnumExists)
include(CheckStructHasMember)

set(BUILD_PLUGIN_INTERFACE 0)

if(PLUGIN_INTERFACE)
    check_include_file(ifaddrs.h  HAVE_IFADDRS_H)
    check_struct_has_member("struct if_data" "ifi_ibytes" "net/if.h" HAVE_STRUCT_IF_DATA)
    set(_INC_NETINET_IP6)
    if(HAVE_SYS_TYPES_H)
        list(APPEND _INC_NETINET_IP6 sys/types.h)
    endif()
    if(HAVE_SYS_SOCKET_H)
        list(APPEND _INC_NETINET_IP6 sys/socket.h)
    endif()
    if(HAVE_NETINET_IN_H)
        list(APPEND _INC_NETINET_IP6 netinet/in.h)
    endif()
    list(APPEND _INC_NETINET_IP6 netinet/ip6.h)
    check_struct_has_member("struct ip6_ext" "ip6e_len" "${_INC_NETINET_IP6}" HAVE_STRUCT_IP6_EXT)
    if(BUILD_LINUX)
        find_package(LibMnl)
        if(LIBMNL_FOUND)
            check_include_file(linux/gen_stats.h HAVE_LINUX_GEN_STATS_H)
            check_include_file(linux/pkt_sched.h HAVE_LINUX_PKT_SCHED_H)
            check_include_file(linux/if.h HAVE_LINUX_IF_H)
            check_include_file(linux/netdevice.h HAVE_LINUX_NETDEVICE_H)
            check_struct_has_member("struct net_device_stats" "rx_bytes" "linux/netdevice.h" HAVE_STRUCT_NET_DEVICE_STATS)
            check_enum_exists(IFLA_VF_STATS "linux/if_link.h" HAVE_IFLA_VF_STATS)
            check_enum_exists(IFLA_VF_STATS_RX_DROPPED "linux/if_link.h" HAVE_IFLA_VF_STATS_RX_DROPPED)
            check_enum_exists(IFLA_VF_STATS_TX_DROPPED "linux/if_link.h" HAVE_IFLA_VF_STATS_TX_DROPPED)
            check_enum_exists(IFLA_CARRIER_UP_COUNT "linux/if_link.h" HAVE_IFLA_CARRIER_UP_COUNT)
            check_enum_exists(IFLA_CARRIER_DOWN_COUNT "linux/if_link.h" HAVE_IFLA_CARRIER_DOWN_COUNT)
            check_struct_has_member("struct rtnl_link_stats64" "tx_window_errors" "linux/if_link.h" HAVE_RTNL_LINK_STATS64)
            check_struct_has_member("struct rtnl_link_stats64" "rx_nohandler" "linux/if_link.h" HAVE_STRUCT_RTNL_LINK_STATS64_RX_NOHANDLER)
            check_struct_has_member("struct rtnl_link_stats" "rx_nohandler" "linux/if_link.h" HAVE_STRUCT_RTNL_LINK_STATS_RX_NOHANDLER)
            set(BUILD_PLUGIN_INTERFACE 1)
        else()
            set(BUILD_PLUGIN_INTERFACE_REASON "libmnl not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_BSD OR BUILD_DARWIN)
        check_function_exists(getifaddrs HAVE_GETIFADDRS)
        if(HAVE_GETIFADDRS)
            set(BUILD_PLUGIN_INTERFACE 1)
        else()
            set(BUILD_PLUGIN_INTERFACE_REASON "getifaddrs not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_AIX)
        find_package(LibPerfstat)
        if(LIBPERFSTAT_FOUND)
            set(BUILD_PLUGIN_INTERFACE 1)
        else()
            set(BUILD_PLUGIN_INTERFACE_REASON "perfstat not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_SOLARIS)
        find_package(LibKstat)
        if(LIBKSTAT_FOUND)
            set(BUILD_PLUGIN_INTERFACE 1)
        else()
            set(BUILD_PLUGIN_INTERFACE_REASON "kstat not found" PARENT_SCOPE)
        endif()
    else()
        set(BUILD_PLUGIN_INTERFACE_REASON "unsupported system" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_INTERFACE ${BUILD_PLUGIN_INTERFACE} PARENT_SCOPE)

if(BUILD_PLUGIN_INTERFACE)
    set(PLUGIN_INTERFACE_SRC interface.c interface.h)
    set(PLUGIN_INTERFACE_LIBS libutils libmetric)

    if(HAVE_IFADDRS_H)
        list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFADDRS_H)
    endif()
    if(HAVE_STRUCT_IF_DATA)
        list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_STRUCT_IF_DATA)
    endif()
    if(HAVE_STRUCT_IP6_EXT)
        list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_STRUCT_IP6_EXT)
    endif()

    if(BUILD_LINUX)
        if(HAVE_LINUX_GEN_STATS_H)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_LINUX_GEN_STATS_H)
        endif()
        if(HAVE_LINUX_PKT_SCHED_H)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_LINUX_PKT_SCHED_H)
        endif()
        if(HAVE_LINUX_IF_H)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_LINUX_IF_H)
        endif()
        if(HAVE_LINUX_NETDEVICE_H)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_LINUX_NETDEVICE_H)
        endif()
        if(HAVE_STRUCT_NET_DEVICE_STATS)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_STRUCT_NET_DEVICE_STATS)
        endif()
        if(HAVE_IFLA_VF_STATS)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFLA_VF_STATS)
        endif()
        if(HAVE_IFLA_VF_STATS_RX_DROPPED)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFLA_VF_STATS_RX_DROPPED)
        endif()
        if(HAVE_IFLA_VF_STATS_TX_DROPPED)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFLA_VF_STATS_TX_DROPPED)
        endif()
        if(HAVE_IFLA_CARRIER_UP_COUNT)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFLA_CARRIER_UP_COUNT)
        endif()
        if(HAVE_IFLA_CARRIER_DOWN_COUNT)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_IFLA_CARRIER_DOWN_COUNT)
        endif()
        if(HAVE_RTNL_LINK_STATS64)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_RTNL_LINK_STATS64)
        endif()
        if(HAVE_STRUCT_RTNL_LINK_STATS64_RX_NOHANDLER)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_STRUCT_RTNL_LINK_STATS64_RX_NOHANDLER)
        endif()
        if(HAVE_STRUCT_RTNL_LINK_STATS_RX_NOHANDLER)
            list(APPEND PLUGIN_INTERFACE_DEFINITIONS HAVE_STRUCT_RTNL_LINK_STATS_RX_NOHANDLER)
        endif()
        list(APPEND PLUGIN_INTERFACE_SRC interface_linux.c)
        list(APPEND PLUGIN_INTERFACE_LIBS LibMnl::LibMnl)
    elseif(BUILD_BSD OR BUILD_DARWIN)
        list(APPEND PLUGIN_INTERFACE_SRC interface_bsd.c)
    elseif(BUILD_AIX)
        list(APPEND PLUGIN_INTERFACE_SRC interface_aix.c)
        list(APPEND PLUGIN_INTERFACE_LIBS LibPerfstat::LibPerfstat)
    elseif(BUILD_SOLARIS)
        list(APPEND PLUGIN_INTERFACE_SRC interface_solaris.c)
        list(APPEND PLUGIN_INTERFACE_LIBS LibKstat::LibKstat)
    endif()

    add_library(interface MODULE ${PLUGIN_INTERFACE_SRC})
    target_link_libraries(interface PRIVATE ${PLUGIN_INTERFACE_LIBS})
    target_compile_definitions(interface PUBLIC ${PLUGIN_INTERFACE_DEFINITIONS})
    set_target_properties(interface PROPERTIES PREFIX "")

#    add_executable(test_plugin_interface EXCLUDE_FROM_ALL interface_test.c ${PLUGIN_INTERFACE_SRC})
#    target_link_libraries(test_plugin_interface libtest libutils libmetric -lm)
#    add_dependencies(build_tests test_plugin_interface)
#    add_test(NAME test_plugin_interface COMMAND test_plugin_interface WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    install(TARGETS interface DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-interface.5 ncollectd-interface.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-interface.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
